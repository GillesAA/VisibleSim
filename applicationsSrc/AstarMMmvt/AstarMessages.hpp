/**
 * @file AstarMMmvt.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2000-12-02                                                                     
 **/

#ifndef AstarMessages_H_
#define AstarMessages_H_

#include "comm/network.h"
#include "grid/cell3DPosition.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "utils/color.h"
#include <map>

static const uint MSG_DELAY = 0;

using namespace Catoms3D;

class GraphBuildMessage : public HandleableMessage {
    protected:
        Cell3DPosition senderPos;
        
    public:
        GraphBuildMessage(const Cell3DPosition& sPos)
            : HandleableMessage(), senderPos(sPos) {};
        
        virtual ~GraphBuildMessage(){};
        
        virtual void handle(BaseSimulator::BlockCode* bc) override;
        virtual Message* clone() const override {return new GraphBuildMessage(*this);}
        virtual std::string getName() const override { return "GraphBuildMessage"; }
};

class GraphMergeMessage : public HandleableMessage {
    protected:
    std::map<Cell3DPosition, std::vector<std::pair<Cell3DPosition, Cell3DPosition>>> graphEdgesData;

    public:
        GraphMergeMessage(const std::map<Cell3DPosition, std::vector<std::pair<Cell3DPosition, Cell3DPosition>>>& graph) 
        : HandleableMessage(), graphEdgesData(graph) {};
        virtual ~GraphMergeMessage() {};
    
        virtual void handle(BaseSimulator::BlockCode* bc) override;
        virtual Message* clone() const override { return new GraphMergeMessage(*this); }
        virtual std::string getName() const override{ return "GraphMergeMessage"; }
    
};
    
class PLSMessage : public HandleableMessage {
    protected:
     Cell3DPosition tPos;
     Cell3DPosition senderPos;

 
    public:
     PLSMessage(Cell3DPosition _tPos, Cell3DPosition sPos)
         : HandleableMessage(), tPos(_tPos), senderPos(sPos) {};
 
     virtual ~PLSMessage() {};
 
     void handle(BaseSimulator::BlockCode *) override;
     Message *clone() const override { return new PLSMessage(*this); }
     string getName() const override { return "PLSMessage{" + tPos.to_string() + "}"; }
 };

class GLOMessage : public HandleableMessage {
    protected:
 
    public:
     GLOMessage()
         : HandleableMessage() {};
 
     virtual ~GLOMessage() {};
 
     void handle(BaseSimulator::BlockCode *) override;
     Message *clone() const override { return new GLOMessage(*this); }
     string getName() const override { return "GLOMessage"; }
 };

 class FTRMessage : public HandleableMessage {
    protected:
    Cell3DPosition senderInPos;
    std::vector<std::pair<Cell3DPosition, Cell3DPosition>> prevDiscoveredPath;
    public:
     FTRMessage(std::vector<std::pair<Cell3DPosition, Cell3DPosition>> pDP, Cell3DPosition sIPos)
         : HandleableMessage(), prevDiscoveredPath(pDP), senderInPos(sIPos) {};
 
     virtual ~FTRMessage() {};
 
     void handle(BaseSimulator::BlockCode *) override;
     Message *clone() const override { return new FTRMessage(*this); }
     string getName() const override { return "FTRMessage" + senderInPos.to_string(); }
 };
    
#endif