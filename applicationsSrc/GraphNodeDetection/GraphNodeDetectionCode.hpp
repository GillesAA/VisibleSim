/**
 * @file GraphNodeDetectionCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2024-03-23                                                                     
 **/	

#ifndef GraphNodeDetectionCode_H_
#define GraphNodeDetectionCode_H_

#include "robots/catoms3D/catoms3DSimulator.h"
#include "robots/catoms3D/catoms3DWorld.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "robots/catoms3D/catoms3DMotionEngine.h"

static const int BROADCAST_MSG_ID = 1001;
static const int ACKNOWLEDGE_MSG_ID = 1002;
static const int BROKEN_MSG_ID = 1003;

using namespace Catoms3D;


class GraphNodeDetectionCode : public Catoms3DBlockCode {
private:
	Catoms3DBlock *module = nullptr;
	bool isA = true;
  bool isB = false;
  bool isC = true;
  int maxd=0;
  int distance=0;
  int currentRound=0;
  int nbWaitedAnswers=0;
  int subTreeSize=0;
  int probability=0;
  array<bool, 12> brokenInterfaces = {0};
  P2PNetworkInterface *parent= nullptr;
  P2PNetworkInterface *maxInt = nullptr;
  
  static map<int, int> subgraphs;
  static int reachableModulesCount;
public :

  Catoms3D::Catoms3DBlock *catom;
	GraphNodeDetectionCode(Catoms3DBlock *host);
	~GraphNodeDetectionCode() {};

/**
  * This function is called on startup of the blockCode, it can be used to perform initial
  *  configuration of the host or this instance of the program.
  * @note this can be thought of as the main function of the module
  */
    void startup() override;

/**
  * @brief Provides the user with a pointer to the configuration file parser, which can be used to read additional user information from each block config. Has to be overridden in the child class.
  * @param config : pointer to the TiXmlElement representing the block configuration file, all information related to concerned block have already been parsed
  *
  */
    void myBroadcastFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'acknowledge'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  * 
  */
    void myAcknowledgeFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

    void fromBrokenFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface*sender);

    void parseUserBlockElements(TiXmlElement *config) override;

/**
  * User-implemented keyboard handler function that gets called when
  *  a key press event could not be caught by openglViewer
  * @param c key that was pressed (see openglViewer.cpp)
  * @param x location of the pointer on the x axis
  * @param y location of the pointer on the y axis
  * @note call is made from GlutContext::keyboardFunc (openglViewer.h)
  */

    void parseUserElements(TiXmlDocument *config) override;

    void onMotionEnd() override;

    int sendMessage(const char *msgString, Message *msg, P2PNetworkInterface *dest, Time t0, Time dt);

    int breakInterface(P2PNetworkInterface* interface);

    GraphNodeDetectionCode* getUnreachedModule();

    void onBlockSelected() override;

    int initFlood();
    void printSubgraphs();
    static vector<pair<P2PNetworkInterface*, GraphNodeDetectionCode*>>  getRandomInterfaces(float p);
    static int breakInterfaces(float p_interfaces);

/*****************************************************************************/
/** needed to associate code to module                                      **/
	static BlockCode *buildNewBlockCode(BuildingBlock *host) {
	    return(new GraphNodeDetectionCode((Catoms3DBlock*)host));
	}
/*****************************************************************************/
};

#endif /* GraphNodeDetectionCode_H_ */