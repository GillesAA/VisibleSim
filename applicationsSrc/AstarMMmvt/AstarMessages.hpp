/**
 * @file AstarMMmvt.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2000-12-02                                                                     
 **/

#ifndef AstarMessages_H_
#define AstarMessages_H_

#include "comm/network.h"
#include "grid/cell3DPosition.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "utils/color.h"
#include <map>

static const uint MSG_DELAY = 0;

using namespace Catoms3D;

class GraphBuildMessage : public HandleableMessage {
    protected:
        Cell3DPosition senderPos;
        
    public:
        GraphBuildMessage(const Cell3DPosition& sPos)
            : HandleableMessage(), senderPos(sPos) {};
        
        virtual ~GraphBuildMessage(){};
        
        virtual void handle(BaseSimulator::BlockCode* bc) override;
        virtual Message* clone() const override {return new GraphBuildMessage(*this);}
        virtual std::string getName() const override { return "GraphBuildMessage"; }
    };

class GraphMergeMessage : public HandleableMessage {
    protected:
        std::map<Cell3DPosition, std::vector<Cell3DPosition>> graphEdgesData;

    public:
        GraphMergeMessage(const std::map<Cell3DPosition, std::vector<Cell3DPosition>>& graph) 
        : HandleableMessage(), graphEdgesData(graph) {};
        virtual ~GraphMergeMessage() {};
    
        virtual void handle(BaseSimulator::BlockCode* bc) override;
        virtual Message* clone() const override { return new GraphMergeMessage(*this); }
        virtual std::string getName() const override{ return "GraphMergeMessage"; }
    
};
    
    

class GLOMessage : public HandleableMessage {
    protected:
     Cell3DPosition srcPos;
 
    public:
     GLOMessage(Cell3DPosition _srcPos)
         : HandleableMessage(), srcPos(_srcPos){};
 
     ~GLOMessage() override = default;;
 
     void handle(BaseSimulator::BlockCode *) override;
     Message *clone() const override { return new GLOMessage(*this); }
     string getName() const override { return "GLOMessage{" + srcPos.to_string() + "}"; }
 };

 class FTRMessage : public HandleableMessage {
    protected:
    public:
     FTRMessage() : HandleableMessage(){};
 
     ~FTRMessage(){};
 
     void handle(BaseSimulator::BlockCode *) override;
     Message *clone() const override { return new FTRMessage(*this); }
     string getName() const override { return "FTRMessage{}"; }
 };
    
#endif