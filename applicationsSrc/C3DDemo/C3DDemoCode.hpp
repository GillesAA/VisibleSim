/**
 * @file C3DDemoCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2023-09-20                                                                     
 **/	

#ifndef C3DDemoCode_H_
#define C3DDemoCode_H_

#include "motion/teleportationEvents.h"
#include "motion/translationEvents.h"
#include "robots/catoms3D/catoms3DSimulator.h"
#include "robots/catoms3D/catoms3DWorld.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "robots/catoms3D/catoms3DMotionEngine.h"
#include "robots/catoms3D/catoms3DRotationEvents.h"
#include "math/cell3DPosition.h"
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <unordered_set>
#include <cmath>
#include <algorithm>


using namespace Catoms3D;
using std::string;

class C3DDemoCode : public Catoms3DBlockCode {
private:
    Catoms3DBlock *module = nullptr;

    // Member variables
    int distance = -1;
    bool isReturning = false;
    bool finalJourney = false;
    P2PNetworkInterface* parent = nullptr;
    int nbWaitedAnswers = 0;
    Cell3DPosition currentTarget = Cell3DPosition(15, 0, 1);//(15, 0, 1) (17, 5, 6)
    Cell3DPosition originalTarget = currentTarget;
    std::map<Cell3DPosition, Cell3DPosition> parentMap;
    std::vector<Cell3DPosition> discoveredPath;
    std::vector<Cell3DPosition> optimalPath;
    std::vector<P2PNetworkInterface> neighbors;

public:
    // Static members
    static std::map<Cell3DPosition, std::vector<Cell3DPosition>> cells;
    static std::vector<Cell3DPosition> visited;
    static std::vector<Cell3DPosition> teleportedPositions;

    // Constructor and destructor
    C3DDemoCode(Catoms3DBlock *host);
    ~C3DDemoCode() override {};

    // Main startup function
    void startup() override;

    // Event handlers
    void onBlockSelected() override;
    void processLocalEvent(std::shared_ptr<Event> pev) override;
    void onMotionEnd() override;

    // GUI interface
    string onInterfaceDraw() override;

    double calculateDistance(const Cell3DPosition &a, const Cell3DPosition &b);

    // Command-line arguments
    bool parseUserCommandLineArgument(int &argc, char **argv[]) override;

    // Additional helper methods
    void onAssertTriggered();
    void floodDistance();
    /*****************************************************************************/
    /** Needed to associate code to module                                      **/
    static BlockCode* buildNewBlockCode(BuildingBlock *host) {
        return (new C3DDemoCode((Catoms3DBlock*)host));
    }
    /*****************************************************************************/
};


#endif /* C3DDemoCode_H_ */