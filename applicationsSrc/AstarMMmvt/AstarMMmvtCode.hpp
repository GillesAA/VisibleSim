/**
 * @file AstarMMmvt.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2000-12-02                                                                     
 **/

 #ifndef AstarMMmvt_H_
 #define AstarMMmvt_H_
 
 #include "robots/catoms3D/catoms3DSimulator.h"
 #include "robots/catoms3D/catoms3DWorld.h"
 #include "robots/catoms3D/catoms3DBlockCode.h"
 #include "robots/catoms3D/catoms3DMotionEngine.h"
 #include "math/cell3DPosition.h"
 #include <map>
 #include <vector>
 #include <string>
 #include <queue>
 #include <unordered_set>
 #include <unordered_map>
 #include <cmath>
 #include <algorithm>
 #include <fstream>
 
 static const int BROADCAST_MSG_ID = 1001;
 static const int GRAPHBUILD_MSG_ID = 1002;
 
 using namespace Catoms3D;
 using std::string;
 
 class AstarMMmvt : public Catoms3DBlockCode {
 private:
     Catoms3DBlock *module = nullptr;
 
     // Member variables
     bool isfree= false;
     int distance = -1;
     bool isReturning = false;
     P2PNetworkInterface* parent = nullptr;
     int nbWaitedAnswers = 0;
     std::map<Cell3DPosition, std::vector<Cell3DPosition>> graphEdges;
     std::map<int, std::vector<int>> graphConnectors;
     std::vector<Cell3DPosition> discoveredPath;
     Cell3DPosition currentTarget = Cell3DPosition(20, 19, 0);
 
 public:
 
     static std::queue<std::array<int, 3>> targetQueue;
     // Constructor and destructor
     AstarMMmvt(Catoms3DBlock *host);
     ~AstarMMmvt() override {};
 
     // Main startup function
     void startup() override;
 
     // MSG function
     void myBroadcastFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);
     void myGraphBuildFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);
 
     // Graph Functions
     void mergeGraphEdges(std::map<Cell3DPosition, std::vector<Cell3DPosition>>& targetGraph, 
         const std::map<Cell3DPosition, std::vector<Cell3DPosition>>& sourceGraph);
 
     double heuristic(const Cell3DPosition &a, const Cell3DPosition &b);
 
     std::vector<Cell3DPosition> a_star(const std::map<Cell3DPosition, std::vector<Cell3DPosition>> &graphEdges, Cell3DPosition start, Cell3DPosition goal);
 
     // Event handlers
     void onBlockSelected() override;
     void processLocalEvent(std::shared_ptr<Event> pev) override;
     void onMotionEnd() override;
 
     // GUI interface
     string onInterfaceDraw() override;

     void parseUserBlockElements(TiXmlElement *config);

 
     void parseUserElements(TiXmlDocument *config) override;
 
     // Command-line arguments
     bool parseUserCommandLineArgument(int &argc, char **argv[]) override;
 
     // Additional helper methods
     void onAssertTriggered();
 
     /*****************************************************************************/
     /** Needed to associate code to module                                      **/
     static BlockCode* buildNewBlockCode(BuildingBlock *host) {
         return (new AstarMMmvt((Catoms3DBlock*)host));
     }
     /*****************************************************************************/
 };
 
 #endif 
 
 