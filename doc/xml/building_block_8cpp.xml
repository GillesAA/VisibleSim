<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="building_block_8cpp" kind="file" language="C++">
    <compoundname>buildingBlock.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="world_8h" local="yes">world.h</includes>
    <includes refid="building_block_8h" local="yes">buildingBlock.h</includes>
    <includes refid="scheduler_8h" local="yes">scheduler.h</includes>
    <includes refid="trace_8h" local="yes">trace.h</includes>
    <incdepgraph>
      <node id="11049">
        <label>list</label>
      </node>
      <node id="11082">
        <label>openglViewer.h</label>
        <link refid="opengl_viewer_8h"/>
        <childnode refid="11052" relation="include">
        </childnode>
        <childnode refid="11083" relation="include">
        </childnode>
        <childnode refid="11060" relation="include">
        </childnode>
        <childnode refid="11065" relation="include">
        </childnode>
        <childnode refid="11050" relation="include">
        </childnode>
        <childnode refid="11084" relation="include">
        </childnode>
      </node>
      <node id="11060">
        <label>matrice44.h</label>
        <link refid="matrice44_8h"/>
        <childnode refid="11056" relation="include">
        </childnode>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11055" relation="include">
        </childnode>
        <childnode refid="11061" relation="include">
        </childnode>
        <childnode refid="11062" relation="include">
        </childnode>
      </node>
      <node id="11052">
        <label>shaders.h</label>
        <link refid="shaders_8h"/>
        <childnode refid="11053" relation="include">
        </childnode>
        <childnode refid="11054" relation="include">
        </childnode>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11055" relation="include">
        </childnode>
        <childnode refid="11056" relation="include">
        </childnode>
        <childnode refid="11057" relation="include">
        </childnode>
        <childnode refid="11058" relation="include">
        </childnode>
        <childnode refid="11059" relation="include">
        </childnode>
        <childnode refid="11060" relation="include">
        </childnode>
        <childnode refid="11065" relation="include">
        </childnode>
      </node>
      <node id="11062">
        <label>vecteur.h</label>
        <link refid="vecteur_8h"/>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11055" relation="include">
        </childnode>
        <childnode refid="11063" relation="include">
        </childnode>
        <childnode refid="11064" relation="include">
        </childnode>
      </node>
      <node id="11084">
        <label>interface.h</label>
        <link refid="interface_8h"/>
        <childnode refid="11043" relation="include">
        </childnode>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11055" relation="include">
        </childnode>
        <childnode refid="11064" relation="include">
        </childnode>
        <childnode refid="11050" relation="include">
        </childnode>
        <childnode refid="11041" relation="include">
        </childnode>
        <childnode refid="11066" relation="include">
        </childnode>
      </node>
      <node id="11039">
        <label>/Users/pthalamy/Desktop/VSimRef/VisibleSim/simulatorCore/src/buildingBlock.cpp</label>
        <link refid="buildingBlock.cpp"/>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11041" relation="include">
        </childnode>
        <childnode refid="11046" relation="include">
        </childnode>
        <childnode refid="11072" relation="include">
        </childnode>
        <childnode refid="11071" relation="include">
        </childnode>
      </node>
      <node id="11047">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="11076">
        <label>boost/interprocess/sync/interprocess_semaphore.hpp</label>
      </node>
      <node id="11045">
        <label>assert.h</label>
      </node>
      <node id="11070">
        <label>stdint.h</label>
      </node>
      <node id="11054">
        <label>stdlib.h</label>
      </node>
      <node id="11046">
        <label>buildingBlock.h</label>
        <link refid="building_block_8h"/>
        <childnode refid="11047" relation="include">
        </childnode>
        <childnode refid="11048" relation="include">
        </childnode>
        <childnode refid="11044" relation="include">
        </childnode>
        <childnode refid="11049" relation="include">
        </childnode>
        <childnode refid="11050" relation="include">
        </childnode>
        <childnode refid="11067" relation="include">
        </childnode>
        <childnode refid="11069" relation="include">
        </childnode>
      </node>
      <node id="11063">
        <label>cmath</label>
      </node>
      <node id="11051">
        <label>string</label>
      </node>
      <node id="11056">
        <label>GL/glew.h</label>
      </node>
      <node id="11042">
        <label>map</label>
      </node>
      <node id="11074">
        <label>boost/thread.hpp</label>
      </node>
      <node id="11064">
        <label>memory.h</label>
      </node>
      <node id="11050">
        <label>glBlock.h</label>
        <link refid="gl_block_8h"/>
        <childnode refid="11051" relation="include">
        </childnode>
        <childnode refid="11052" relation="include">
        </childnode>
        <childnode refid="11062" relation="include">
        </childnode>
        <childnode refid="11066" relation="include">
        </childnode>
      </node>
      <node id="11055">
        <label>fstream</label>
      </node>
      <node id="11067">
        <label>blockCode.h</label>
        <link refid="block_code_8h"/>
        <childnode refid="11046" relation="include">
        </childnode>
        <childnode refid="11068" relation="include">
        </childnode>
      </node>
      <node id="11059">
        <label>GL/glu.h</label>
      </node>
      <node id="11078">
        <label>uniqueEventsId.h</label>
        <link refid="unique_events_id_8h"/>
      </node>
      <node id="11065">
        <label>camera.h</label>
        <link refid="camera_8h"/>
        <childnode refid="11061" relation="include">
        </childnode>
        <childnode refid="11062" relation="include">
        </childnode>
        <childnode refid="11060" relation="include">
        </childnode>
      </node>
      <node id="11057">
        <label>GL/freeglut.h</label>
      </node>
      <node id="11083">
        <label>pthread.h</label>
      </node>
      <node id="11081">
        <label>string.h</label>
      </node>
      <node id="11043">
        <label>vector</label>
      </node>
      <node id="11079">
        <label>network.h</label>
        <link refid="network_8h"/>
        <childnode refid="11080" relation="include">
        </childnode>
        <childnode refid="11081" relation="include">
        </childnode>
        <childnode refid="11047" relation="include">
        </childnode>
        <childnode refid="11046" relation="include">
        </childnode>
      </node>
      <node id="11073">
        <label>sstream</label>
      </node>
      <node id="11072">
        <label>scheduler.h</label>
        <link refid="scheduler_8h"/>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11073" relation="include">
        </childnode>
        <childnode refid="11042" relation="include">
        </childnode>
        <childnode refid="11068" relation="include">
        </childnode>
        <childnode refid="11045" relation="include">
        </childnode>
        <childnode refid="11074" relation="include">
        </childnode>
        <childnode refid="11075" relation="include">
        </childnode>
        <childnode refid="11044" relation="include">
        </childnode>
        <childnode refid="11076" relation="include">
        </childnode>
        <childnode refid="11077" relation="include">
        </childnode>
        <childnode refid="11082" relation="include">
        </childnode>
      </node>
      <node id="11061">
        <label>math.h</label>
      </node>
      <node id="11066">
        <label>color.h</label>
        <link refid="color_8h"/>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11055" relation="include">
        </childnode>
        <childnode refid="11063" relation="include">
        </childnode>
        <childnode refid="11064" relation="include">
        </childnode>
        <childnode refid="11052" relation="include">
        </childnode>
      </node>
      <node id="11040">
        <label>iostream</label>
      </node>
      <node id="11080">
        <label>deque</label>
      </node>
      <node id="11075">
        <label>boost/bind.hpp</label>
      </node>
      <node id="11044">
        <label>boost/interprocess/sync/interprocess_mutex.hpp</label>
      </node>
      <node id="11071">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="11055" relation="include">
        </childnode>
      </node>
      <node id="11077">
        <label>events.h</label>
        <link refid="events_8h"/>
        <childnode refid="11068" relation="include">
        </childnode>
        <childnode refid="11051" relation="include">
        </childnode>
        <childnode refid="11047" relation="include">
        </childnode>
        <childnode refid="11046" relation="include">
        </childnode>
        <childnode refid="11078" relation="include">
        </childnode>
        <childnode refid="11079" relation="include">
        </childnode>
        <childnode refid="11066" relation="include">
        </childnode>
      </node>
      <node id="11048">
        <label>boost/random.hpp</label>
      </node>
      <node id="11041">
        <label>world.h</label>
        <link refid="world_8h"/>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11042" relation="include">
        </childnode>
        <childnode refid="11043" relation="include">
        </childnode>
        <childnode refid="11044" relation="include">
        </childnode>
        <childnode refid="11045" relation="include">
        </childnode>
        <childnode refid="11046" relation="include">
        </childnode>
        <childnode refid="11050" relation="include">
        </childnode>
        <childnode refid="11071" relation="include">
        </childnode>
      </node>
      <node id="11058">
        <label>GL/gl.h</label>
      </node>
      <node id="11053">
        <label>stdio.h</label>
      </node>
      <node id="11069">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="11046" relation="include">
        </childnode>
        <childnode refid="11070" relation="include">
        </childnode>
        <childnode refid="11040" relation="include">
        </childnode>
        <childnode refid="11048" relation="include">
        </childnode>
        <childnode refid="11049" relation="include">
        </childnode>
      </node>
      <node id="11068">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_base_simulator">BaseSimulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>buildingBlock.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>22<sp/>mars<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>dom</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="world_8h" kindref="compound">world.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="building_block_8h" kindref="compound">buildingBlock.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scheduler_8h" kindref="compound">scheduler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trace_8h" kindref="compound">trace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_base_simulator" kindref="compound">BaseSimulator</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BuildingBlock::nextId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BuildingBlock<sp/><sp/>(class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_base_simulator_1_1_building_block_1aba95f6f397d531a01b27f2b3fa7de652" refkind="member"><highlight class="normal">BuildingBlock::BuildingBlock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bId)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8h_1a61a3c9a18380aafb6e430e79bf596557" kindref="member">OUTPUT</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BuildingBlock<sp/>constructor<sp/>(id:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nextId<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bId<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockId<sp/>=<sp/>nextId;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextId++;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockId<sp/>=<sp/>bId;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>P2PNetworkInterfaceNextLocalId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>ALIVE;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>generator<sp/>=<sp/>boost::rand48(50*blockId);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>clock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_base_simulator_1_1_building_block_1ad967e578e5caf99add64a73522eb9843" refkind="member"><highlight class="normal">BuildingBlock::~BuildingBlock()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blockCode;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8h_1a61a3c9a18380aafb6e430e79bf596557" kindref="member">OUTPUT</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BuildingBlock<sp/>destructor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clock<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clock;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_base_simulator_1_1_building_block_1a8f0e6775f89826a6c6ac6d1d5425af43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BuildingBlock::getNextP2PInterfaceLocalId()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>P2PNetworkInterfaceNextLocalId;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>P2PNetworkInterfaceNextLocalId++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_base_simulator_1_1_building_block_1a0562dfed0ecc8ad52ba997bbd34d6260" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BuildingBlock::addP2PNetworkInterfaceAndConnectTo(<ref refid="class_base_simulator_1_1_building_block" kindref="compound">BuildingBlock</ref><sp/>*destBlock)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref><sp/>*ni1,<sp/>*ni2;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>ni1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ni2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getP2PNetworkInterfaceByBlockRef(destBlock))<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creation<sp/>of<sp/>the<sp/>new<sp/>network<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8h_1a61a3c9a18380aafb6e430e79bf596557" kindref="member">OUTPUT</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;adding<sp/>a<sp/>new<sp/>interface<sp/>to<sp/>block<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>destBlock-&gt;<ref refid="class_base_simulator_1_1_building_block_1ab12b5c18f7bfa254584dfc2891b1f21e" kindref="member">blockId</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P2PNetworkInterfaceList.push_back(ni1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!destBlock-&gt;<ref refid="class_base_simulator_1_1_building_block_1afa1ec97c549b373435d5b4243fe3b06b" kindref="member">getP2PNetworkInterfaceByBlockRef</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creation<sp/>of<sp/>the<sp/>new<sp/>network<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8h_1a61a3c9a18380aafb6e430e79bf596557" kindref="member">OUTPUT</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;adding<sp/>a<sp/>new<sp/>interface<sp/>to<sp/>block<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;blockId<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>(destBlock);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destBlock-&gt;<ref refid="class_base_simulator_1_1_building_block_1a5946de890047149f5efd92c85593fd46" kindref="member">P2PNetworkInterfaceList</ref>.push_back(ni2);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ni1!=NULL<sp/>&amp;&amp;<sp/>ni2!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni1-&gt;<ref refid="class_p2_p_network_interface_1a455a98370d6a05e68b992f1418a7a8bd" kindref="member">connect</ref>(ni2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8h_1a61a3c9a18380aafb6e430e79bf596557" kindref="member">OUTPUT</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>ERROR<sp/>***<sp/>could<sp/>not<sp/>connect<sp/>the<sp/>new<sp/>interfaces&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_base_simulator_1_1_building_block_1ad2e1ae70e54db639cd601cc9646f6353" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BuildingBlock::addP2PNetworkInterfaceAndConnectTo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destBlockId)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>link<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_simulator_1_1_building_block" kindref="compound">BuildingBlock</ref><sp/>*destBlock<sp/>=<sp/><ref refid="namespace_base_simulator_1a2a1f7a0fc6c69525e369dc9226e1a23c" kindref="member">BaseSimulator::getWorld</ref>()-&gt;<ref refid="class_base_simulator_1_1_world_1a5242c801311b599d02cd5987ea165900" kindref="member">getBlockById</ref>(destBlockId);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getP2PNetworkInterfaceByBlockRef(destBlock))<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creation<sp/>of<sp/>the<sp/>new<sp/>network<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>*<sp/>ni1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P2PNetworkInterfaceList.push_back(ni1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>corresponding<sp/>interface<sp/>exists<sp/>in<sp/>the<sp/>connected<sp/>block,<sp/>we<sp/>link<sp/>the<sp/>two<sp/>interfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destBlock-&gt;<ref refid="class_base_simulator_1_1_building_block_1a0562dfed0ecc8ad52ba997bbd34d6260" kindref="member">addP2PNetworkInterfaceAndConnectTo</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>*<sp/>ni2<sp/>=<sp/>destBlock-&gt;<ref refid="class_base_simulator_1_1_building_block_1afa1ec97c549b373435d5b4243fe3b06b" kindref="member">getP2PNetworkInterfaceByBlockRef</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ni1-&gt;<ref refid="class_p2_p_network_interface_1a455a98370d6a05e68b992f1418a7a8bd" kindref="member">connect</ref>(ni2);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_base_simulator_1_1_building_block_1afa1ec97c549b373435d5b4243fe3b06b" refkind="member"><highlight class="normal"><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref><sp/>*BuildingBlock::getP2PNetworkInterfaceByBlockRef(<ref refid="class_base_simulator_1_1_building_block" kindref="compound">BuildingBlock</ref><sp/>*destBlock)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list<sp/>&lt;P2PNetworkInterface*&gt;::const_iterator<sp/>it=P2PNetworkInterfaceList.begin();<sp/>it<sp/>!=<sp/>P2PNetworkInterfaceList.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;connectedInterface)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;connectedInterface-&gt;hostBlock<sp/>==<sp/>destBlock)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_base_simulator_1_1_building_block_1a241c4094748d9ef309ba802415652f71" refkind="member"><highlight class="normal"><ref refid="class_p2_p_network_interface" kindref="compound">P2PNetworkInterface</ref>*BuildingBlock::getP2PNetworkInterfaceByDestBlockId(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destBlockId)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(list<sp/>&lt;P2PNetworkInterface*&gt;::const_iterator<sp/>it=P2PNetworkInterfaceList.begin();<sp/>it<sp/>!=<sp/>P2PNetworkInterfaceList.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;connectedInterface)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;connectedInterface-&gt;hostBlock-&gt;blockId<sp/>==<sp/>destBlockId)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="class_base_simulator_1_1_building_block_1aae17adb1550aa82ebc545407c4b3d5a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BuildingBlock::scheduleLocalEvent(<ref refid="block_code_8h_1a56b05f33015aed5e05468e7319580b56" kindref="member">EventPtr</ref><sp/>pev)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>localEventsList.push_back(pev);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localEventsList.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>date;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>date<sp/>=<sp/>this-&gt;blockCode-&gt;<ref refid="class_p2_p_network_interface_1a4e38ef9507d8bd7d203dda927ef11e4e" kindref="member">availabilityDate</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(date<sp/>&lt;<sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1ae81ef60dad0226f78f234599c674628f" kindref="member">now</ref>())<sp/>date=<ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1ae81ef60dad0226f78f234599c674628f" kindref="member">now</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1abbc91e91f78b52204af22e66afedecb4" kindref="member">schedule</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_process_local_event" kindref="compound">ProcessLocalEvent</ref>(date,</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="class_base_simulator_1_1_building_block_1abbb0537e4aae4eba618526dbbb8575a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BuildingBlock::processLocalEvent()<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="block_code_8h_1a56b05f33015aed5e05468e7319580b56" kindref="member">EventPtr</ref><sp/>pev;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localEventsList.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>ERROR<sp/>***<sp/>The<sp/>local<sp/>event<sp/>list<sp/>should<sp/>not<sp/>be<sp/>empty<sp/>!!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1af6601a5e1b70ff8ee02400b4657f6a22" kindref="member">trace</ref>(</highlight><highlight class="stringliteral">&quot;***<sp/>ERROR<sp/>***<sp/>The<sp/>local<sp/>event<sp/>list<sp/>should<sp/>not<sp/>be<sp/>empty<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>pev<sp/>=<sp/>localEventsList.front();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>localEventsList.pop_front();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>blockCode-&gt;processLocalEvent(pev);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockCode-&gt;availabilityDate<sp/>&lt;<sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;now())<sp/>blockCode-&gt;availabilityDate<sp/>=<sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1ae81ef60dad0226f78f234599c674628f" kindref="member">now</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localEventsList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_blinky_blocks_1ad7233374e9ceba1a46d8a3b748c00d13" kindref="member">getScheduler</ref>()-&gt;<ref refid="class_base_simulator_1_1_scheduler_1abbc91e91f78b52204af22e66afedecb4" kindref="member">schedule</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_process_local_event" kindref="compound">ProcessLocalEvent</ref>(blockCode-&gt;availabilityDate,</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_base_simulator_1_1_building_block_1a24792d57532b46ad3af4b02c6a88360b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BuildingBlock::getNextRandomNumber()<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>generator();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_base_simulator_1_1_building_block_1a6fb1405bc2d1bda4056591a22ecd311d" refkind="member"><highlight class="normal">uint64_t<sp/>BuildingBlock::getTime()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clock<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;device<sp/>has<sp/>no<sp/>internal<sp/>clock&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock-&gt;getTime();</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="class_base_simulator_1_1_building_block_1a2e37ca9ab2044b9ab7af54b1c0312451" refkind="member"><highlight class="normal">uint64_t<sp/>BuildingBlock::getSchedulerTimeForLocalTime(uint64_t<sp/>localTime)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clock<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;device<sp/>has<sp/>no<sp/>internal<sp/>clock&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localTime;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock-&gt;getSchedulerTimeForLocalTime(localTime);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>BaseSimulator<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/pthalamy/Desktop/VSimRef/VisibleSim/simulatorCore/src/buildingBlock.cpp"/>
  </compounddef>
</doxygen>
