/**
 * @file Graphtest.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2000-12-02                                                                     
 **/

#ifndef Graphtest_H_
#define Graphtest_H_

#include "robots/catoms3D/catoms3DSimulator.h"
#include "robots/catoms3D/catoms3DWorld.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "robots/catoms3D/catoms3DMotionEngine.h"
#include "math/cell3DPosition.h"
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <unordered_set>
#include <cmath>
#include <algorithm>

static const int BROADCAST_MSG_ID = 1001;
static const int GRAPHBUILD_MSG_ID = 1002;

using namespace Catoms3D;
using std::string;

class Graphtest : public Catoms3DBlockCode {
private:
    Catoms3DBlock *module = nullptr;

    // Member variables
    int distance = -1;
    bool isReturning = false;
    P2PNetworkInterface* parent = nullptr;
    int nbWaitedAnswers = 0;
    std::map<Cell3DPosition, std::vector<Cell3DPosition>> graphEdges;
    bool ack = false;
    std::map<Cell3DPosition, Cell3DPosition> parentMap;
    std::vector<Cell3DPosition> discoveredPath;

public:
    // Static members
    static std::map<Cell3DPosition, std::vector<Cell3DPosition>> cells;
    static std::vector<Cell3DPosition> visited;
    static std::vector<Cell3DPosition> teleportedPositions;

    // Constructor and destructor
    Graphtest(Catoms3DBlock *host);
    ~Graphtest() override {};

    // Main startup function
    void startup() override;

    // MSG function
    void myBroadcastFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);
    void myGraphBuildFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

    // Graph Functions
    void mergeGraphEdges(std::map<Cell3DPosition, std::vector<Cell3DPosition>>& targetGraph, 
        const std::map<Cell3DPosition, std::vector<Cell3DPosition>>& sourceGraph);

    // Event handlers
    void onBlockSelected() override;
    void processLocalEvent(std::shared_ptr<Event> pev) override;
    void onMotionEnd() override;

    // GUI interface
    string onInterfaceDraw() override;

    // Command-line arguments
    bool parseUserCommandLineArgument(int &argc, char **argv[]) override;

    // Additional helper methods
    void onAssertTriggered();
    void floodDistance();

    /*****************************************************************************/
    /** Needed to associate code to module                                      **/
    static BlockCode* buildNewBlockCode(BuildingBlock *host) {
        return (new Graphtest((Catoms3DBlock*)host));
    }
    /*****************************************************************************/
};

#endif /* CATOMS_TEST_1_BLOCK_CODE_H_ */
